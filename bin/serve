#!/usr/bin/env node

const Server = require('../lib/server');
const minimist = require('minimist');
const commandLineUsage = require('command-line-usage');
const helpSections = require('../lib/help');

class Serve {
  constructor() {
    this.http = require('http');

    this.defaultOptions = {
      port: Number(process.env.PORT) || 4040,
      public: process.env.PUBLIC_DIR || '.',
      logstash: process.env.ENABLE_LOGSTASH,
      rotate: process.env.ROTATE_LOGS,
      logsDir: process.env.LOGS_DIR || 'logs',
      app: process.env.APP_NAME || 'combined',
      secure: process.env.HTTPS
    };

    this.parseCommandArgs();
    this.usage();
    this.version();
    this.app = new Server(this.options).instance;
  }

  parseCommandArgs() {
    this.args = minimist(process.argv.slice(2));
    this.args.public = this.args._[0]
      ? this.args._[0]
      : this.defaultOptions.public;
  }

  version() {
    if (this.args.v || this.args.version) {
      console.log('Servir version: ', require('../package.json').version);
      return process.exit(0);
    }
  }

  usage() {
    if (this.args.h || this.args.help) {
      console.log(commandLineUsage(helpSections));
      return process.exit(0);
    }
  }

  get options() {
    return Object.assign({}, this.defaultOptions, this.args);
  }

  get port() {
    return Number(this.options.p || this.options.port);
  }

  start() {
    console.log(this.args)
    const server = this.http.createServer(this.app);
    return server.listen(this.port, error => {
      if (error) throw error;
      console.log(
        `Serving content from ${this.args.public} directory on port ${
          this.port
        }`
      );
    });
  }
}

new Serve().start();
